< Overview >

WebDriver:
If you are beginning with desktop website or mobile website test automation, then you are going to be using WebDriver APIs.
WebDriver uses browser automation APIs provided by browser vendors to control the browser and run tests.

IDE:
IDE (Integrated Development Environment) is the tool you use to develop your Selenium test cases.

Grid:
Selenium Grid allows you to run test cases in different machines across different platforms.

Selenium components:
Building a test suite using WebDriver will require you to understand and effectively use several components.
API: Application Programming Interface. This is the set of “commands” you use to manipulate WebDriver.
Library: A code module that contains the APIs and the code necessary to implement them. Libraries are specific to each language binding, eg .jar files for Java, .dll files for .NET, etc.
Driver: Responsible for controlling the actual browser. Most drivers are created by the browser vendors themselves. NOTE: Some people refer to the drivers as proxies.
Framework: An additional library that is used as a support for WebDriver suites. These frameworks may be test frameworks such as JUnit or NUnit.

The Parts and Pieces:
WebDriver talks to a browser through a driver.
Communication is two-way: WebDriver passes commands to the browser through the driver, and receives information back via the same route.
The driver is specific to the browser, such as ChromeDriver for Google’s Chrome/Chromium, GeckoDriver for Mozilla’s Firefox, etc.

This simple example above is direct communication.Communication to the browser may also be remote communication through Selenium Server or RemoteWebDriver.
RemoteWebDriver runs on the same system as the driver and the browser.Remote communication can also take place using Selenium Server or Selenium Grid, both of which in turn talk to the driver on the host system

Where Frameworks fit in:
WebDriver has one job and one job only: communicate with the browser via any of the methods above. WebDriver does not know a thing about testing: it does not know how to compare things, assert pass or fail, and it certainly does not know a thing about reporting or Given/When/Then grammar.

This is where various frameworks come into play. At a minimum, you will need a test framework that matches the language bindings, e.g., NUnit for .NET, JUnit for Java, RSpec for Ruby, etc.

The test framework is responsible for running and executing your WebDriver and related steps in your tests. As such, you can think of it looking akin to the following image.

JUnit - A widely-used testing framework for Java-based Selenium tests.
TestNG - Offers extra features like parallel test execution and parameterized tests.