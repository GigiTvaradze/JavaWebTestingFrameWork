Checkboxes are elements that allow users to select one or more options from a set.

<form id="exampleForm">
    <input type="checkbox" id="checkbox1" name="option1" value="Option1"> Option 1<br>
    <input type="checkbox" id="checkbox2" name="option2" value="Option2"> Option 2<br>
    <input type="checkbox" id="checkbox3" name="option3" value="Option3"> Option 3<br>
</form>

Checkboxes are typically represented by the <input> HTML tag with a type="checkbox" attribute.
You can locate them using various strategies like By.id, By.name, By.xpath, By.cssSelector, etc.

To select a checkbox, you simply use the click() method. If the checkbox is already selected, clicking it again will deselect it.


//Selecting a Checkbox
if (!checkbox1.isSelected()) {
                 checkbox1.click();
             }

// Deselect the checkbox (if it's selected)
if (checkbox1.isSelected()) {
    checkbox1.click();
}

Selecting Multiple Checkboxes:

List<WebElement> checkboxes = driver.findElements(By.cssSelector("input[type='checkbox']"));

for (WebElement checkbox : checkboxes) {
    if (!checkbox.isSelected()) {
        checkbox.click();
    }
}

Handling Dynamic Checkboxes:
Sometimes, checkboxes may be dynamically generated or displayed based on certain conditions.
In such cases, you can use explicit waits to ensure that the checkboxes are present and visible before interacting with them.

WebDriverWait wait = new WebDriverWait(driver, 10);
WebElement checkbox = wait.until(ExpectedConditions.elementToBeClickable(By.id("checkbox1")));

if (!checkbox.isSelected()) {
    checkbox.click();
}

Verifying Checkbox State:

You can verify if a checkbox is selected or not using the isSelected() method:

boolean isChecked = checkbox1.isSelected();
System.out.println("Checkbox is selected: " + isChecked);